#################################################################################################################
#                                         Entrando com os pacotes necessários
#################################################################################################################

#install.packages("ggplot2")
library(ggplot2)
#install.packages("scales")
library(scales)
#install.packages("survival")
library(survival)
#install.packages("survminer")
library(survminer)
#install.packages("data.table")
library(data.table)

#################################################################################################################
#                                      Inportando e manipulando o banco de dados 
#################################################################################################################

dados <- read.csv("C:\\Users\\ferna\\OneDrive\\Área de Trabalho\\Sistema\\Análise Exploratória do banco\\Banco2.csv")

dados <- dados[,-1]

for (i in 1:nrow(dados)) {
  if(dados[i,4 ] == "FUNDEF/Fundo de Manutenção e Desenvolvimento do Ensino Fundamental e de Valorização do Magistério"){
    dados[i,4] <- "FUNDEF"
  }
}

dados[,7] <- 1

dados[,8] <- substring(dados$Data,1,4)
names(dados)[names(dados) == "V8"] <- "Ano"

dados$Objeto <- as.character(dados$Objeto)

dados$N_Processo <- as.character(dados$N_Processo)

#################################################################################################################
#                     Gráfico de Barras contendo as Frequência das classes processuais 
#################################################################################################################

tabela <- as.data.frame(table(dados$V7, by=dados$Objeto))
tabela <- tabela[,-1]

ggplot(tabela, aes(x = reorder(by, -Freq), y = Freq)) +
  geom_col(fill = "dodgerblue") +
  labs(title = "",
       subtitle = "5ª Vara da Justiça Federal",
       x = "Classes Processuais",
       y = "Frequência")+ coord_flip()+
  geom_text(aes(y=Freq, label=Freq),color="black")+
  theme(axis.text.x = element_text(angle = 90, hjust = 1))


#################################################################################################################
#                 Gráfico de Barras contendo as Frequência das classes processuais por ano
#################################################################################################################

freq_table = as.data.frame(table(subset(dados, select = c(Objeto, Ano))))
freq_table <- freq_table[freq_table$Freq != 0,]

freq_table1 <- freq_table[freq_table$Ano == c("2017"),]
freq_table2 <- freq_table[freq_table$Ano == c("2018"),]
freq_table3 <- freq_table[freq_table$Ano == c("2019"),]

freq_table <- rbind(freq_table1,freq_table2,freq_table3)

ggplot(freq_table, aes(x = reorder(Objeto, -Freq), y = Freq, fill=Ano)) +
  geom_col(position = "dodge") +
  labs(title = "",
       subtitle = "5ª Vara da Justiça Federal",
       x = "Classes Processuais",
       y = "Frequência",
       fill = "Ano")+ coord_flip()+
  geom_text(aes(y=Freq, label=Freq),color="black",size=2,position=position_dodge(width=0.9),
            hjust=-0.7)+
  theme(axis.text.x = element_text(angle = 90, hjust = 1))+scale_fill_brewer(palette="Dark2")


#################################################################################################################
#                 Gráfico de setores contendo as Frequência das classes processuais
#################################################################################################################

for (i in 1:nrow(tabela)) {
  if(tabela[i,2] < 176){tabela[i,1] <- "Outros"} # Colocando o nome "Outros".
}

Outros <- tabela[tabela$by == "Outros",]
Outros <- data.frame("Outros", sum(Outros$Freq))
names(Outros) <- c("by","Freq")

tabela <- tabela[tabela$by != "Outros",]
tabela <- rbind(tabela, Outros)

names(tabela)[names(tabela) == "by"] <- "Classe Processual"


for (i in 1:nrow(tabela)) {
  tabela[i,3] <- tabela[i,2]/sum(tabela[,2])
}

names(tabela)[names(tabela) == "V3"] <- "Probabilidade"

bp <- ggplot(tabela, aes(x="", y=Probabilidade, fill=`Classe Processual`))+
  geom_bar(width = 1, stat = "identity")

pie <- bp + coord_polar("y", start=0)

pie + scale_fill_brewer(palette="Blues")+
  theme_minimal()+  labs(title = "",
                         subtitle = "5ª Vara da Justiça Federal",
                         x = " ",
                         y = " ")+ 
  geom_text(aes(x=1.3,label = paste0(Freq,
                                     " (",
                                     scales::percent(Probabilidade),
                                     ")")),
            position = position_stack(vjust = 0.5), size=3)


#################################################################################################################
#             Gráfico de setores contendo as Frequência das classes processuais segundo o ano
#################################################################################################################

for (i in 1:nrow(freq_table)) {
  if(freq_table[i,3] < 50){freq_table[i,1] <- "Outros"} # Colocando o nome "Outros".
}

Outros <- freq_table[freq_table$Objeto == "Outros",]
Outros <- data.frame("Outros", aggregate(Outros$Freq, by=list(Category=Outros$Ano), FUN=sum))
names(Outros) <- c("Objeto","Ano","Freq")

freq_table <- freq_table[freq_table$Objeto != "Outros",]
freq_table <- rbind(freq_table, Outros)

names(tabela)[names(tabela) == "by"] <- "Classe Processual"

freq_table1 <- freq_table[freq_table$Ano=="2017",] # Separando para calcular as probabilidades individuais.
freq_table2 <- freq_table[freq_table$Ano=="2018",]
freq_table3 <- freq_table[freq_table$Ano=="2019",]

for (i in 1:nrow(freq_table1)) {
  freq_table1[i,4] <- freq_table1[i,3]/sum(freq_table1[,3]) # Ano de 2017
}

names(freq_table1)[names(freq_table1) == "V4"] <- "Probabilidade"

for (i in 1:nrow(freq_table2)) {
  freq_table2[i,4] <- freq_table2[i,3]/sum(freq_table2[,3]) # Ano de 2018
}

names(freq_table2)[names(freq_table2) == "V4"] <- "Probabilidade"


for (i in 1:nrow(freq_table3)) {
  if(freq_table3[i,3] < 100){freq_table3[i,1] <- "Outros"} # Colocando o nome "Outros".
}

Outros <- freq_table3[freq_table3$Objeto == "Outros",]
Outros <- data.frame("Outros", aggregate(Outros$Freq, by=list(Category=Outros$Ano), FUN=sum))
names(Outros) <- c("Objeto","Ano","Freq")

freq_table3 <- freq_table3[freq_table3$Objeto != "Outros",]
freq_table3 <- rbind(freq_table3, Outros)

for (i in 1:nrow(freq_table3)) {
  freq_table3[i,4] <- freq_table3[i,3]/sum(freq_table3[,3]) # Ano de 2019
}


names(freq_table3)[names(freq_table3) == "V4"] <- "Probabilidade"

par(mfrow=c(3,1))

bp <- ggplot(freq_table1, aes(x="", y=Probabilidade, fill=Objeto))+ # Gráfico de pizza para o ano de 2017
  geom_bar(width = 1, stat = "identity")

pie <- bp + coord_polar("y", start=0)

pie + scale_fill_brewer(palette="Blues")+
  theme_minimal()+  labs(title = "",
                         subtitle = "5ª Vara da Justiça Federal",
                         x = " ",
                         y = " ",
                         fill =  "Classe Processual")+ 
  geom_text(aes(x=1.3,label = paste0(Freq,
                                     " (",
                                     scales::percent(Probabilidade),
                                     ")")),
            position = position_stack(vjust = 0.5), size=3)



bp1 <- ggplot(freq_table2, aes(x="", y=Probabilidade, fill=Objeto))+ # Gráfico de pizza para o ano de 2018
  geom_bar(width = 1, stat = "identity")

pie1 <- bp1 + coord_polar("y", start=0)

pie1 + scale_fill_brewer(palette="Blues")+
  theme_minimal()+  labs(title = "",
                         subtitle = "5ª Vara da Justiça Federal",
                         x = " ",
                         y = " ",
                         fill =  "Classe Processual")+ 
  geom_text(aes(x=1.3,label = paste0(Freq,
                                     " (",
                                     scales::percent(Probabilidade),
                                     ")")),
            position = position_stack(vjust = 0.5), size=3)



bp2 <- ggplot(freq_table3, aes(x="", y=Probabilidade, fill=Objeto))+ # Gráfico de pizza para o ano de 2019
  geom_bar(width = 1, stat = "identity")

pie2 <- bp2 + coord_polar("y", start=0)

pie2 + scale_fill_brewer(palette="Blues")+
  theme_minimal()+  labs(title = "",
                         subtitle = "5ª Vara da Justiça Federal",
                         x = " ",
                         y = " ",
                         fill =  "Classe Processual")+ 
  geom_text(aes(x=1.3,label = paste0(Freq,
                                     " (",
                                     scales::percent(Probabilidade),
                                     ")")),
            position = position_stack(vjust = 0.5), size=3)


#################################################################################################################
#                Gráfico de barras contendo as Frequência das etapas processuais censuradas
#################################################################################################################

censura <- dados[dados$Censura == 1,]
tabela2 <- as.data.frame(table(censura$V7, by=censura$Tipo_Movimentação))
tabela2 <- tabela2[,-1]
tabela2 <- tabela2[tabela2$Freq != 0,]

tabela2$by <- as.character(tabela2$by)

if(length(grep("Conclusão-",tabela2$by)) != 0){
  tabela2[grep("Conclusão-",tabela2$by),1] <- substring(tabela2[grep("Conclusão-",tabela2$by),1],11)
}

tabela2 <- aggregate(tabela2$Freq,
                     by = list(tabela2$by),
                     FUN = sum)

names(tabela2) <- c("by","Freq") 

ggplot(tabela2, aes(x = reorder(by, -Freq), y = Freq)) +
  geom_col(fill = "dodgerblue") +
  labs(title = "",
       subtitle = "5ª Vara da Justiça Federal",
       x = "Etapas Processuais",
       y = "Frequência")+ coord_flip()+
  geom_text(aes(y=Freq, label=Freq),color="black", hjust = 1)+
  theme(axis.text.x = element_text(angle = 90, hjust = 1))+ expand_limits(y=c(0,1400))

#################################################################################################################
#                Gráfico de setores contendo as Frequência das etapas processuais censuradas
#################################################################################################################

for (i in 1:nrow(tabela2)) {
  if(tabela2[i,2] < 70){tabela2[i,1] <- "Outros"}
}

Outros <- tabela2[tabela2$by == "Outros",]
Outros <- data.frame("Outros", sum(Outros$Freq))
names(Outros) <- c("by","Freq")

tabela2 <- tabela2[tabela2$by != "Outros",]
tabela2 <- rbind(tabela2, Outros)

names(tabela2)[names(tabela2) == "by"] <- "Classe Processual"


for (i in 1:nrow(tabela2)) {
  tabela2[i,3] <- tabela2[i,2]/sum(tabela2[,2])
}

names(tabela2)[names(tabela2) == "V3"] <- "Probabilidade"


bp <- ggplot(tabela2, aes(x="", y=Probabilidade, fill=`Classe Processual`))+
  geom_bar(width = 1, stat = "identity")

pie <- bp + coord_polar("y", start=0)

pie + scale_fill_brewer(palette="Blues")+
  theme_minimal()+  labs(title = "",
                         subtitle = "5ª Vara da Justiça Federal",
                         x = " ",
                         y = " ")+ 
  geom_text(aes(x=1.45,label = paste0(Freq,
                                      " (",
                                      scales::percent(Probabilidade),
                                      ")")),
            position = position_stack(vjust = 0.3), size=3)


#################################################################################################################
#             Gráfico de barras contendo as Frequência das etapas processuais não censuradas
#################################################################################################################

nao_censura <- dados[dados$Censura == 0,]
tabela3 <- as.data.frame(table(nao_censura$V7, by=nao_censura$Tipo_Movimentação))
tabela3 <- tabela3[,-1]
tabela3 <- tabela3[tabela3$Freq != 0,]

tabela3$by <- as.character(tabela3$by)

if(length(grep("Conclusão-",tabela3$by)) != 0){
  tabela3[grep("Conclusão-",tabela3$by),1] <- substring(tabela3[grep("Conclusão-",tabela3$by),1],11)
}

tabela3 <- aggregate(tabela3$Freq,
                     by = list(tabela3$by),
                     FUN = sum)

names(tabela3) <- c("by","Freq") 

ggplot(tabela3, aes(x = reorder(by, -Freq), y = Freq)) +
  geom_col(fill = "dodgerblue") +
  labs(title = "",
       subtitle = "5ª Vara da Justiça Federal",
       x = "Etapas Processuais",
       y = "Frequência")+ coord_flip()+
  geom_text(aes(y=Freq, label=Freq),color="black", hjust = 0)+
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

#################################################################################################################
#               Gráfico de setores contendo as Frequência das etapas processuais não censuradas
#################################################################################################################

for (i in 1:nrow(tabela3)) {
  if(tabela3[i,2] < 190){tabela3[i,1] <- "Outros"}
}

Outros <- tabela3[tabela3$by == "Outros",]
Outros <- data.frame("Outros", sum(Outros$Freq))
names(Outros) <- c("by","Freq")

tabela3 <- tabela3[tabela3$by != "Outros",]
tabela3 <- rbind(tabela3, Outros)

names(tabela3)[names(tabela3) == "by"] <- "Classe Processual"


for (i in 1:nrow(tabela3)) {
  tabela3[i,3] <- tabela3[i,2]/sum(tabela3[,2])
}

names(tabela3) <- c("Etapas Processuais","Freq","Probabilidade")

bp <- ggplot(tabela3, aes(x="", y=Probabilidade, fill=`Etapas Processuais`))+
  geom_bar(width = 1, stat = "identity")

pie <- bp + coord_polar("y", start=0)

pie + scale_fill_brewer(palette="Blues")+
  theme_minimal()+  labs(title = "",
                         subtitle = "5ª Vara da Justiça Federal",
                         x = " ",
                         y = " ")+ 
  geom_text(aes(x=1.3,label = paste0(Freq,
                                     " (",
                                     scales::percent(Probabilidade),
                                     ")")),
            position = position_stack(vjust = 0.3), size=3)


#################################################################################################################
#                                Gráfico de Boxplot para as Classes Processuais
#################################################################################################################

dados$Objeto <- as.character(dados$Objeto) 
dados$N_Processo <- as.numeric(dados$N_Processo) 
dados$Tempo <- as.numeric(dados$Tempo) 

filtro <- aggregate(dados$N_Processo, by=list(dados$Objeto,dados$Tempo),sum)
names(filtro) <- c("Objeto","Tempo","N_Processo")

filtro <- filtro[filtro$Tempo != 0,]

fill <- "#4271AE"
lines <- "#1F3552"

ggplot(filtro, aes(x = Objeto, y = Tempo)) +
  geom_boxplot(colour = lines, fill = fill,
               size = 1) +
  scale_y_continuous(name = "Tempo de duração",
                     breaks = seq(0, 175, 25),
                     limits=c(0, 175)) +
  scale_x_discrete(name = "Classes processuais") +
  ggtitle("") +
  theme_bw() +
  theme(panel.grid.major = element_line(colour = "#d3d3d3"),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank(),
        plot.title = element_text(size = 14, family = "Tahoma", face = "bold"),
        text=element_text(family = "Tahoma"),
        axis.title = element_text(face="bold"),
        axis.text.x = element_text(colour="black", size = 11),
        axis.text.y = element_text(colour="black", size = 9),
        axis.line = element_line(size=0.5, colour = "black"))+coord_flip()+
  stat_summary(fun.y=mean, colour="blue4", geom="point", 
               shape=18, size=3,show_guide = FALSE)


#################################################################################################################
#                                Medidas descritivas para o Boxplot
#################################################################################################################

tapply(dados$Tempo, dados$Objeto, summary)

#################################################################################################################
#                                Calculando a função de Sobrevivência
#################################################################################################################

fit <- survfit(Surv(Tempo, Censura) ~ 1,type="kaplan-meier",conf.type="log",data = dados)

ggsurvplot(
  fit,
  data = dados,
  legend.labs = "All",
  palette =c("#CC0000"),# custom color palettes
  size = 1,# change line size
  conf.int = TRUE,# Add p-value 
  ggtheme = theme_bw()# Change ggplot2 theme
) +
  labs(title = "",
       subtitle = "5ª Vara da Justiça Federal",
       x = "Tempo",
       y = "Probaabilidade de Sobrevivência")


#################################################################################################################
#                                        Taxa de Risco acumulada
#################################################################################################################

ggsurvplot(
  fit,
  data = dados, fun = "event", 
  legend.labs = "All",
  palette =
    c("#CC0000"),# custom color palettes
  size = 1,# change line size
  conf.int = TRUE,# Add p-value 
  ggtheme = theme_bw()# Change ggplot2 theme
)+
  labs(title = "",
       subtitle = "5ª Vara da Justiça Federal",
       x = "Tempo",
       y = "Probaabilidade de Sobrevivência")



#################################################################################################################
#                                  Conferindo qual é o melhor ajuste ao modelo
#################################################################################################################

dados <- read.csv("C:\\Users\\ferna\\OneDrive\\Área de Trabalho\\Sistema\\Análise Exploratória do banco\\Banco2.csv")

dados <- dados[,-1]

dados <- dados[dados$Tempo > 50,]

# Estimando o modelo de Kaplan-Meier 

fit <- survfit(Surv(Tempo, Censura) ~ 1,type="kaplan-meier",conf.type="log",data = dados)

par(mfrow=c(2,2))

#################################################################################################################
#                                          Distribuição de Weibull
#################################################################################################################

plot(fit, main="Distribuição de Weibull",
     xlab = "Tempo", ylab = "Probabilidade de Sobrevivência")
grid(4, 5, lty = "dotted")

## Estimação Paramétrica com a distribuição de Weibull

Modelo1 <- survreg(Surv(Tempo, Censura) ~ Tipo_Movimentação, data = dados, dist='weibull')


lines(x = predict(Modelo1, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "red", lty=1)

Modelo2 <- survreg(Surv(Tempo, Censura) ~ Objeto, data = dados, dist='weibull')

lines(x = predict(Modelo2, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "blue",lty=2)

Modelo3 <- survreg(Surv(Tempo, Censura) ~ Tipo_Movimentação + Objeto, data = dados, dist='weibull')

lines(x = predict(Modelo3, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "green",lty=3)

Modelo4 <- survreg(Surv(Tempo, Censura) ~ Tipo_Movimentação * Objeto, data = dados, dist='weibull')

lines(x = predict(Modelo4, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "orange",lty=4)

## Adiocionando a legenda ao gráfico
legend(530,0.1, legend=c("Modelo 1", "Modelo 2", "Modelo 3", "Modelo 4"),
       col=c("red", "blue", "green","orange"), lty=1:4, cex=0.6,box.lty=0, y.intersp = 0.1, x.intersp = 0.2,
       xpd = TRUE, horiz=FALSE, bty = "n",
       xjust=0, yjust=0)


## Sumário dos valores

summary(Modelo1)
summary(Modelo2)
summary(Modelo3)
summary(Modelo4)

#################################################################################################################
#                                          Distribuição Exponencial
#################################################################################################################

plot(fit, main="Distribuição Exponencial",
     xlab = "Tempo", ylab = "Probabilidade de Sobrevivência")
grid(4, 5, lty = "dotted")

## Estimação Paramétrica com a distribuição Exponencial

Modelo1 <- survreg(Surv(Tempo, Censura) ~ Tipo_Movimentação, data = dados, dist='exponential')

lines(x = predict(Modelo1, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "red", lty=1)

Modelo2 <- survreg(Surv(Tempo, Censura) ~ Objeto, data = dados, dist='exponential')

lines(x = predict(Modelo2, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "blue",lty=2)

Modelo3 <- survreg(Surv(Tempo, Censura) ~ Tipo_Movimentação + Objeto, data = dados, dist='exponential')

lines(x = predict(Modelo3, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "green",lty=3)

Modelo4 <- survreg(Surv(Tempo, Censura) ~ Tipo_Movimentação * Objeto, data = dados, dist='exponential')

lines(x = predict(Modelo4, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "orange",lty=4)

## Adiocionando a legenda ao gráfico
legend(530,0.1, legend=c("Modelo 1", "Modelo 2", "Modelo 3", "Modelo 4"),
       col=c("red", "blue", "green","orange"), lty=1:4, cex=0.6,box.lty=0, y.intersp = 0.1, x.intersp = 0.2,
       xpd = TRUE, horiz=FALSE, bty = "n",
       xjust=0, yjust=0)

## Sumário dos valores

summary(Modelo1)
summary(Modelo2)
summary(Modelo3)
summary(Modelo4)

#################################################################################################################
#                                          Distribuição Log-logistic
#################################################################################################################

plot(fit, main="Distribuição Log-logistica",
     xlab = "Tempo", ylab = "Probabilidade de Sobrevivência")
grid(4, 5, lty = "dotted")

## Estimação Paramétrica com a distribuição Exponencial

Modelo1 <- survreg(Surv(Tempo, Censura) ~ Tipo_Movimentação, data = dados, dist='loglogistic')

lines(x = predict(Modelo1, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "red", lty=1)

Modelo2 <- survreg(Surv(Tempo, Censura) ~ Objeto, data = dados, dist='loglogistic')

lines(x = predict(Modelo2, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "blue",lty=2)

Modelo3 <- survreg(Surv(Tempo, Censura) ~ Tipo_Movimentação + Objeto, data = dados, dist='loglogistic')

lines(x = predict(Modelo3, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "green",lty=3)

Modelo4 <- survreg(Surv(Tempo, Censura) ~ Tipo_Movimentação * Objeto, data = dados, dist='loglogistic')

lines(x = predict(Modelo4, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "orange",lty=4)

## Adiocionando a legenda ao gráfico
legend(530,0.1, legend=c("Modelo 1", "Modelo 2", "Modelo 3", "Modelo 4"),
       col=c("red", "blue", "green","orange"), lty=1:4, cex=0.6,box.lty=0, y.intersp = 0.1, x.intersp = 0.2,
       xpd = TRUE, horiz=FALSE, bty = "n",
       xjust=0, yjust=0)

## Sumário dos valores

summary(Modelo1)
summary(Modelo2)
summary(Modelo3)
summary(Modelo4)

#################################################################################################################
#                                          Distribuição Log-normal
#################################################################################################################

plot(fit, main="Distribuição Log-normal",
     xlab = "Tempo", ylab = "Probabilidade de Sobrevivência")
grid(4, 5, lty = "dotted")

## Estimação Paramétrica com a distribuição Exponencial

Modelo1 <- survreg(Surv(Tempo, Censura) ~ Tipo_Movimentação, data = dados, dist='lognormal')

lines(x = predict(Modelo1, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "red", lty=1)

Modelo2 <- survreg(Surv(Tempo, Censura) ~ Objeto, data = dados, dist='lognormal')

lines(x = predict(Modelo2, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "blue",lty=2)

Modelo3 <- survreg(Surv(Tempo, Censura) ~ Tipo_Movimentação + Objeto, data = dados, dist='lognormal')

lines(x = predict(Modelo3, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "green",lty=3)

Modelo4 <- survreg(Surv(Tempo, Censura) ~ Tipo_Movimentação * Objeto, data = dados, dist='lognormal')

lines(x = predict(Modelo4, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "orange",lty=4)

## Adiocionando a legenda ao gráfico
legend(530,0.1, legend=c("Modelo 1", "Modelo 2", "Modelo 3", "Modelo 4"),
       col=c("red", "blue", "green","orange"), lty=1:4, cex=0.6,box.lty=0, y.intersp = 0.1, x.intersp = 0.2,
       xpd = TRUE, horiz=FALSE, bty = "n",
       xjust=0, yjust=0)

## Sumário dos valores

summary(Modelo1)
summary(Modelo2)
summary(Modelo3)
summary(Modelo4)

#################################################################################################################
#                                    Ajuste em relação aos melhores modelos 
#################################################################################################################

par(mfrow=c(1,1))

plot(fit, main=" ",
     xlab = "Tempo", ylab = "Probabilidade de Sobrevivência")
grid(4, 5, lty = "dotted")

Modelo1 <- survreg(Surv(Tempo, Censura) ~ Objeto, data = dados, dist='weibull')

lines(x = predict(Modelo1, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "red",lty=1)

Modelo2 <- survreg(Surv(Tempo, Censura) ~ Objeto, data = dados, dist='exponential')

lines(x = predict(Modelo2, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "blue",lty=2)

Modelo3 <- survreg(Surv(Tempo, Censura) ~ Objeto, data = dados, dist='loglogistic')

lines(x = predict(Modelo3, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "green",lty=3)

Modelo4 <- survreg(Surv(Tempo, Censura) ~ Objeto, data = dados, dist='lognormal')

lines(x = predict(Modelo4, type = "quantile", p = seq(0.01, 0.99, by=.01))[1,],
      y = rev(seq(0.01, 0.99, by = 0.01)),
      col = "orange",lty=4)

## Adiocionando a legenda ao gráfico
legend(650,0.75, legend=c("Weibull", "Exponential", "Log-logistic", "Log-normal"),
       col=c("red", "blue", "green","orange"), lty=1:4, cex=0.7,box.lty=0, y.intersp = 0.45, x.intersp = 0.2,
       xpd = TRUE, horiz=FALSE, bty = "n",
       xjust=0, yjust=0)

########################################################################################################
#                                         Novo Gráfico de censuras
########################################################################################################

# Frequencia de etapas nao censuradas

censura <- dados[dados$Censura == 1,]
tabela2 <- as.data.frame(table(censura$V7, by=censura$Tipo_Movimentação))
tabela2 <- tabela2[,-1]
tabela2 <- tabela2[tabela2$Freq != 0,]

tabela2$by <- as.character(tabela2$by)

if(length(grep("Conclusão-",tabela2$by)) != 0){
  tabela2[grep("Conclusão-",tabela2$by),1] <- substring(tabela2[grep("Conclusão-",tabela2$by),1],11)
}

tabela2 <- aggregate(tabela2$Freq,
                     by = list(tabela2$by),
                     FUN = sum)

names(tabela2) <- c("by","Freq")

#Frequencia de etapas censuradas

nao_censura <- dados[dados$Censura == 0,]
tabela3 <- as.data.frame(table(nao_censura$V7, by=nao_censura$Tipo_Movimentação))
tabela3 <- tabela3[,-1]
tabela3 <- tabela3[tabela3$Freq != 0,]

tabela3$by <- as.character(tabela3$by)

if(length(grep("Conclusão-",tabela3$by)) != 0){
  tabela3[grep("Conclusão-",tabela3$by),1] <- substring(tabela3[grep("Conclusão-",tabela3$by),1],11)
}

tabela3 <- aggregate(tabela3$Freq,
                     by = list(tabela3$by),
                     FUN = sum)

names(tabela3) <- c("by","Freq") 

# Juntando o banco de dados

df1 <- merge(tabela2,tabela3,by='by')

names(df1) <- c("Etapas","Censurado","Não censurado") 

df2 <- tidyr::pivot_longer(df1, cols=c('Censurado', 'Não censurado'), names_to='Legenda', 
                           values_to="value")

ggplot(df2, aes(x = reorder(Etapas, -value), y = value, fill=Legenda)) +
  geom_bar(stat='identity', position='dodge')+ coord_flip()+
  labs(title = "",
       subtitle = "5ª Vara da Justiça Federal",
       x = "Frequência",
       y = "Etapas processuais")+ theme(legend.position="bottom")+ 
  scale_fill_manual(values=c("#004C99", "#3399FF", "#56B4E9"))+
  scale_y_continuous( limits = c(0, 2400))

########################################################################################################
#                                     Gráfico de residuos Cox-snell
########################################################################################################


fit1 <- coxph(formula = Surv(Tempo, Censura) ~ Objeto,
              data    = dados)

dados$resid_mart <- residuals(fit1, type = "martingale")

## Cox-Snell residuals
dados$resid_coxsnell <- -(dados$resid_mart - dados$Censura)


## Fit model on Cox-Snell residuals (Approximately Expo(1) distributed under correct model)
fit_coxsnell <- coxph(formula = Surv(resid_coxsnell, Censura) ~ 1,
                      data    = dados,
                      ties    = c("efron","breslow","exact")[1])

## Nelson-Aalen estimator for baseline hazard (all covariates zero)
df_base_haz <- basehaz(fit_coxsnell, centered = FALSE)

## Plot
ggplot(data = df_base_haz, mapping = aes(x = time, y = hazard)) +
  geom_point() +
  scale_x_continuous(limit = c(0,3.5)) +
  scale_y_continuous(limit = c(0,3.5)) +
  labs(subtitle = "5ª Vara da Justiça Federal",
       x = "Cox-Snell residuals as pseudo observed times",
       y = "Estimated cumulative hazard at pseudo observed times") +
  theme_bw() + theme(legend.key = element_blank())

########################################################################################################
#                                   Gráfico de residuos Schoenfeld
########################################################################################################

Ajuste <-coxph(Surv(Tempo, Censura) ~ Objeto, data = dados)
cox.zph(Ajuste)

ggcoxzph(cox.zph(Ajuste))














# Entrando com os pacotes necessários

library(survival)

# Entrando com o banco de dados

dados <- read.csv("C:\\Users\\ferna\\OneDrive\\Área de Trabalho\\Sistema\\Análise Exploratória do banco\\Banco2.csv")

dados <- dados[,-1]

dados <- dados[dados$Tempo > 50,]

##########################################################################################################
#                                                Deviance
##########################################################################################################

weibull = survreg(Surv(Tempo, Censura) ~ Objeto, data = dados, dist='weibull')

exponential = survreg(Surv(Tempo, Censura) ~ Objeto, data = dados, dist='exponential')

loglogistic = survreg(Surv(Tempo, Censura) ~ Objeto, data = dados, dist='loglogistic')

lognormal = survreg(Surv(Tempo, Censura) ~ Objeto, data = dados, dist='lognormal')

sum(resid(weibull, type = 'deviance')^2)
sum(resid(exponential, type = 'deviance')^2)
sum(resid(loglogistic, type = 'deviance')^2)
sum(resid(lognormal, type = 'deviance')^2)

# Utilizada para obter a medida global de qualidade de ajuste do modelo

# Quanto maior a deviance pior o ajuste

# Quanto menor a deviance, maior o p-valor (melhor a qualidade do ajuste do modelo)

# H0: o modelo se ajusta aos dados

pvalue = 1-pchisq(sum(resid(exponential, type = 'deviance')^2), exponential$df)
pvalue

plot(resid(exponential, type = 'deviance')^2)
